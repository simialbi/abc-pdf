#!/usr/bin/env php
<?php

$ds = DIRECTORY_SEPARATOR;
$root = dirname(__DIR__) . "{$ds}doc$ds";

$dh = opendir($root);
$objects = [];
while (false !== ($class = readdir($dh))) {
    if ($class === '.' || $class === '..') {
        continue;
    }
    $dir = "$root$class{$ds}";

    if (file_exists("$dir{$ds}default.htm")) {
        $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}default.htm"));
        $dom = new DOMDocument();
        $dom->loadHTML($str);
        $xquery = new DOMXPath($dom);

        $result = $xquery->query('//*/td[@class="pageheader"]');
        if ($result->count()) {
            $class = trim(str_replace(['Object', 'Class'], '', $result->item(0)->textContent));
        }
    }
    $methods = [];
    if (is_dir("$dir{$ds}1-methods")) {
        $d = opendir("$dir{$ds}1-methods");
        while (false !== ($file = readdir($d))) {
            if ($file === '.' || $file === '..') {
                continue;
            }

//    $html = file_get_contents("$dir\\1-methods\\$file");
//    $lines = file("$dir\\1-methods\\$file");
            $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}1-methods{$ds}$file"));
            $dom = new DOMDocument();
            $dom->loadHTML($str);
            $xquery = new DOMXPath($dom);

            $return = [];
            $method = '';
            $params = [];

            $result = $xquery->query('(//*/code)[1]');
            if ($result->count()) {
                $code = str_replace(["\r", "\n"], '', $result->item(0)->textContent);
                if (preg_match("#^(?:Set )?(?:([^ ]+) = )?$class\.([^\( ]+)\(?([^\(\)]*)?\)?$#", $code, $matches)) {
                    $return = ['name' => $matches[1], 'type' => 'string'];
                    $method = preg_replace("#^$class\.(.*)$#", '$1', $matches[2]);
                    $params = explode(',', $matches[3]);

                    $tmp = [];
                    for ($i = 0; $i < count($params); $i++) {
                        $param = trim($params[$i], ' []');
                        if ($param === '') {
                            continue;
                        }
                        $tmp[$param] = [
                            'required' => true
                        ];
                        if (str_starts_with(trim($params[$i]), '[') || str_ends_with($params[$i - 1] ?? '', '[')) {
                            $tmp[$param] = [
                                'required' => false
                            ];
                        }
                    }
                    $params = $tmp;
                    unset($tmp);
                } else {
                    continue;
                }
            } else {
                continue;
            }

            $result = $xquery->query('//*/table[@class="wsgtable"]//*/td');
            if ($result->count()) {
                for ($i = 3; $i < $result->count(); $i += 3) {
                    $name = trim($result->item($i)->textContent);
                    if (preg_match('#^(?:Set )?(?:([^ ]+) = )?$class\.([^\( ]+)\(?([^\(\)]*)?\)?$#', $name, $matches)) {
                        $return = ['name' => $matches[1], 'type' => 'string'];
                        $method = preg_replace("#^$class\.(.*)$#", '$1', $matches[2]);
                        $params = explode(',', $matches[3]);
                    }
                    $type = match ($item = trim($result->item($i + 1)->textContent)) {
                        'Array of Bytes', 'Array of Strings', 'Array of XRects', 'Array of Arrays of Bytes', 'Array each of whose items is either String or Array of Bytes' => 'array',
                        'String or Array of Bytes' => 'array|string',
                        'Object', '' => 'mixed',
                        'Double' => 'float',
                        'Boolean' => 'bool',
                        'String' => 'string',
                        'Long' => 'int',
                        default => $item
                    };
                    $desc = trim(implode(" ", array_map('trim', explode("\n", $result->item($i + 2)->textContent))));

                    if ($return['name'] === $name) {
                        $return['description'] = $desc;
                        $return['type'] = $type;
                    } elseif (isset($params[$name])) {
                        $params[$name]['description'] = $desc;
                        $params[$name]['type'] = $type;
                    }
                }
            }

            $result = $xquery->query('//*/table//tr[4]/td[3]/table//*/p');
            if ($result->count()) {
                $desc = '';
                for ($i = 0; $i < $result->count(); $i++) {
                    $desc .= trim(implode(' ', array_map('trim', explode("\n", $result->item($i)->textContent))));
                }
            } else {
                $desc = '';
            }

            $methods[$method] = [
                'description' => str_replace('*/', '/', preg_replace('#(\w)\.(\w)#', '$1. $2', $desc)),
                'params' => $params,
                'return' => $return
            ];
        }
        closedir($d);
    }

    $properties = [];
    if (is_dir("$dir{$ds}2-properties")) {
        $d = opendir("$dir{$ds}2-properties");
        while (false !== ($file = readdir($d))) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}2-properties{$ds}$file"));
            $dom = new DOMDocument();
            $dom->loadHTML($str);
            $xquery = new DOMXPath($dom);

            $result = $xquery->query('//*/td[@class="pageheader"]');
            if ($result->count()) {
                $name = trim(str_replace('Property', '', $result->item(0)->textContent));
                $result = $xquery->query('//*/table//tr[1]/td[3]/table//tr[3]/td[1]/table//tr[2]/td');
                if ($result->count()) {
                    $type = trim($result->item(0)->textContent);
                    $defaultValue = trim($result->item(1)->textContent);
                    $readOnly = trim($result->item(2)->textContent);
                    $description = trim($result->item(3)->textContent);

                    $type = match ($type) {
                        'Array of Bytes', 'Array of Strings', 'Array of XRects', 'Array of Arrays of Bytes' => 'array',
                        'String or Array of Bytes' => 'array|string',
                        'Object' => 'mixed',
                        'Double' => 'float',
                        'Boolean' => 'bool',
                        'String' => 'string',
                        'Long', 'Integer' => 'int',
                        default => $type
                    };

                    if (str_contains($type, ' Collection')) {
                        $type = 'array';
                    }

                    $properties[$name] = [
                        'type' => $type,
                        'description' => $description,
                        'readonly' => $readOnly === 'Yes'
                    ];
                }
            }
        }

        closedir($d);
    }

    $objects[$class] = [
        'methods' => $methods,
        'properties' => $properties,
    ];
}

closedir($dh);

//var_dump($objects['Doc']['methods']['GetData']); exit();

foreach ($objects as $class => $object) {
    $file = <<<PHP
<?php

namespace ABCPdf;

/**

PHP;
    foreach ($object['properties'] as $property => $meta) {
        $file .= ' * @property' . ($meta['readonly'] ? '-read' : '') . " {$meta['type']} \${$property} {$meta['description']}\n";
    }
    $file .= <<<PHP
 */

class {$class} extends BaseObject
{
    /**
     * {@inheritDoc}
     */
    public function __construct(
        string \$assembly_name = 'ABCpdf, Version=12.5.0.5, Culture=neutral, PublicKeyToken=a7a0b3f5184f2169',
        string \$datatype_name = 'WebSupergoo.ABCpdf12.$class',
        int \$codepage = CP_ACP
    )
    {
        parent::__construct(\$assembly_name, \$datatype_name, \$codepage);


PHP;
    foreach ($object['properties'] as $property => $meta) {
        if (!in_array($meta['type'], ['array', 'array|string', 'int', 'bool', 'float', 'string', 'mixed'])) {
            $file .= <<<PHP
        \$this->registerWrappedObject('$property', new {$meta['type']}(\$this->getObject()->$property));

PHP;
        }
    }
    $file .= <<<PHP
    }

PHP;

    foreach ($object['methods'] as $method => $meta) {
        $description = splitDescription($meta['description'], 120, ' * ', 4);
        $file .= <<<PHP
    /**
$description
     *

PHP;
        foreach ($meta['params'] as $name => $param) {
            $req = (!$param['required'] && $param['type'] !== 'mixed') ? '?' : '';
            $file .= "     * @param $req{$param['type']} \$$name {$param['description']}\n";
        }
        if (!empty($meta['return']['name'])) {
            $file .= "     *\n     * @return {$meta['return']['type']} {$meta['return']['description']}\n";
        } else {
            $file .= "     *\n     * @return void\n";
        }
        $file .= <<<PHP
     */
    public function {$method}(
PHP;
        foreach ($meta['params'] as $name => $param) {
            if (!$param['required'] && $param['type'] !== 'mixed') {
                $file .= "?";
            }
            $file .= "{$param['type']} \$$name";
            if (!$param['required']) {
                $file .= ' = null';
            }
            $file .= ", ";
        }
        if (!empty($meta['params'])) {
            $file = substr($file, 0, -2);
        }
        $file .= ")";
        if (!empty($meta['return']['name'])) {
            $file .= ": {$meta['return']['type']}\n    {\n        return \$this->__call('$method', func_get_args());\n    }\n\n";
        } else {
            $file .= ": void\n    {\n        \$this->__call('$method', func_get_args());\n    }\n\n";
        }
    }

    $file .= <<<PHP

}
PHP;


    file_put_contents(dirname(__DIR__) . "{$ds}src{$ds}$class.php", $file);
}


function splitDescription (string $description, int $maxWidth = 120, string $prefix = '', int $whiteSpaces = 0): string
{
    $words = preg_split('/\s+/u', trim($description), 0, PREG_SPLIT_DELIM_CAPTURE);
    $lines = [];
    while (count($words)) {
        $line = '';
        while (strlen($line) + strlen($prefix) + $whiteSpaces <= $maxWidth) {
            $line .= array_shift($words) . ' ';
        }
        $lines[] = $line;
    }
    $result = '';
    foreach ($lines as $line) {
        $result .= str_repeat(' ', $whiteSpaces) . $prefix . $line . "\n";
    }
    return rtrim($result, "\n");
}
