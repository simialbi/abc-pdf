#!/usr/bin/env php
<?php

$ds = DIRECTORY_SEPARATOR;
$root = dirname(__DIR__) . "{$ds}doc$ds";

$dh = opendir($root);
while (false !== ($class = readdir($dh))) {
    if ($class === '.' || $class === '..') {
        continue;
    }
    $dir = "$root$class{$ds}";

    if (file_exists("$dir{$ds}default.htm")) {
        $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}default.htm"));
        $dom = new DOMDocument();
        $dom->loadHTML($str);
        $xquery = new DOMXPath($dom);

        $result = $xquery->query('//*/td[@class="pageheader"]');
        if ($result->count()) {
            $class = trim(str_replace(['Object', 'Class'], '', $result->item(0)->textContent));
        }
    }
    $methods = [];
    if (is_dir("$dir{$ds}1-methods")) {
        $d = opendir("$dir{$ds}1-methods");
        while (false !== ($file = readdir($d))) {
            if ($file === '.' || $file === '..') {
                continue;
            }

//    $html = file_get_contents("$dir\\1-methods\\$file");
//    $lines = file("$dir\\1-methods\\$file");
            $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}1-methods{$ds}$file"));
            $dom = new DOMDocument();
            $dom->loadHTML($str);
            $xquery = new DOMXPath($dom);

            $return = [];
            $method = '';
            $params = [];

            $result = $xquery->query('(//*/code)[1]');
            if ($result->count()) {
                $code = str_replace(["\r", "\n"], '', $result->item(0)->textContent);
                if (preg_match("#^(?:Set )?(?:([^ ]+) = )?$class\.([^\( ]+)\(?([^\(\)]*)?\)?$#", $code, $matches)) {
                    $return = ['name' => $matches[1], 'type' => 'string'];
                    $method = preg_replace("#^$class\.(.*)$#", '$1', $matches[2]);
                    $params = explode(',', $matches[3]);

                    $tmp = [];
                    for ($i = 0; $i < count($params); $i++) {
                        $param = trim($params[$i], ' []');
                        $tmp[$param] = [
                            'required' => true
                        ];
                        if (str_starts_with(trim($params[$i]), '[') || str_ends_with($params[$i - 1] ?? '', '[')) {
                            $tmp[$param] = [
                                'required' => false
                            ];
                        }
                    }
                    $params = $tmp;
                    unset($tmp);
                } else {
                    continue;
                }
            } else {
                continue;
            }

            $result = $xquery->query('//*/table[@class="wsgtable"]//*/td');
            if ($result->count()) {
                for ($i = 3; $i < $result->count(); $i += 3) {
                    $name = trim($result->item($i)->textContent);
                    $type = match ($item = trim($result->item($i + 1)->textContent)) {
                        'Array of Bytes', 'Array of Strings', 'Array of XRects', 'Array of Arrays of Bytes' => 'array',
                        'String or Array of Bytes' => 'array|string',
                        'Object' => 'mixed',
                        'Double' => 'float',
                        'Boolean' => 'bool',
                        'String' => 'string',
                        'Long' => 'int',
                        default => $item
                    };
                    $desc = trim(implode("\n", array_map('trim', explode("\n", $result->item($i + 2)->textContent))));

                    if ($return['name'] === $name) {
                        $return['desc'] = $desc;
                        $return['type'] = $type;
                    } elseif (isset($params[$name])) {
                        $params[$name]['desc'] = $desc;
                        $params[$name]['type'] = $type;
                    }
                }
            }

            $result = $xquery->query('//*/table//tr[4]/td[3]/table//*/p');
            if ($result->count()) {
                $desc = '';
                for ($i = 0; $i < $result->count(); $i++) {
                    $desc .= trim(implode("\n", array_map('trim', explode("\n", $result->item($i)->textContent))));
                }
            } else {
                $desc = '';
            }

            $methods[] = [
                'name' => $method,
                'desc' => $desc,
                'params' => $params,
                'return' => $return
            ];
        }
        closedir($d);
    }

    $properties = '';
    if (is_dir("$dir{$ds}2-properties")) {
        $properties = [];
        $d = opendir("$dir{$ds}2-properties");
        while (false !== ($file = readdir($d))) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            $str = str_replace('&nbsp;', '', file_get_contents("$dir{$ds}2-properties{$ds}$file"));
            $dom = new DOMDocument();
            $dom->loadHTML($str);
            $xquery = new DOMXPath($dom);

            $result = $xquery->query('//*/td[@class="pageheader"]');
            if ($result->count()) {
                $name = trim(str_replace('Property', '', $result->item(0)->textContent));
                $result = $xquery->query('//*/table//tr[1]/td[3]/table//tr[3]/td[1]/table//tr[2]/td');
                if ($result->count()) {
                    $type = trim($result->item(0)->textContent);
                    $defaultValue = trim($result->item(1)->textContent);
                    $readOnly = trim($result->item(2)->textContent);
                    $description = trim($result->item(3)->textContent);


                    $type = match ($type) {
                        'Array of Bytes', 'Array of Strings', 'Array of XRects', 'Array of Arrays of Bytes' => 'array',
                        'String or Array of Bytes' => 'array|string',
                        'Object' => 'mixed',
                        'Double' => 'float',
                        'Boolean' => 'bool',
                        'String' => 'string',
                        'Long' => 'int',
                        default => $type
                    };

                    $property = " * @property";
                    if ($readOnly === 'Yes') {
                        $property .= "-read";
                    }
                    $property .= " $type \$$name $description";

                    $properties[] = $property;
                }
            }
        }

        $properties = implode("\n", $properties);
        closedir($d);
    }

    $file = <<<PHP
<?php

namespace ABCPdf;

/**
$properties
 */
class $class extends \DOTNET
{
    /**
     * {@inheritDoc}
     */
    public function __construct(
        string \$assembly_name = 'ABCpdf, Version=12.5.0.4, Culture=neutral, PublicKeyToken=a7a0b3f5184f2169',
        string \$datatype_name = 'WebSupergoo.ABCpdf12.$class',
        int \$codepage = CP_ACP
    )
    {
        parent::__construct(\$assembly_name, \$datatype_name, \$codepage);
    }

PHP;


    foreach ($methods as $method) {
        $desc = str_replace(["\n", '*/'], ["\n     * ", '/'], $method['desc']);
        $file .= "\n    /**\n     * $desc\n";
        if (count($method['params']) === 1 && array_key_exists('', $method['params'])) {
            $method['params'] = [];
        }
        foreach ($method['params'] as $name => $param) {
            $desc = str_replace("\n", "\n     * ", $param['desc']);
            $file .= "     * @param {$param['type']}" . ($param['required'] ? '' : (empty($param['type']) ? 'mixed' : '|null')) . " \$$name $desc\n";
        }
        if (!empty($method['return']['name'])) {
            $file .= "     * @return {$method['return']['type']} {$method['return']['desc']}\n";
        }
        $file .= "     */\n    public function {$method['name']}(";
        foreach ($method['params'] as $name => $param) {
            if (!empty($param['type'])) {
                $file .= $param['type'];
            }
            if (!$param['required']) {
                if (empty($param['type'])) {
                    $file .= 'mixed';
                } else {
                    $file .= '|null';
                }
            }
            $file .= " \$$name";
            if (!$param['required']) {
                $file .= ' = null';
            }
            $file .= ', ';
        }
        if (!empty($method['params'])) {
            $file = substr($file, 0, -2);
        }
        if (!empty($method['return']['name'])) {
            $file .= "): {$method['return']['type']}\n    {\n        return parent::{$method['name']}(";
        } else {
            $file .= "): void\n    {\n        parent::{$method['name']}(";
        }
        foreach ($method['params'] as $name => $param) {
            $file .= "\$$name, ";
        }
        if (!empty($method['params'])) {
            $file = substr($file, 0, -2);
        }
        $file .= ");\n    }\n";
    }
    $file .= <<<PHP
}
PHP;

    file_put_contents(dirname(__DIR__) . "{$ds}src{$ds}$class.php", $file);
}
